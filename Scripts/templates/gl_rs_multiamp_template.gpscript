

//////////////        GLOBAL RACKSPACE CONTROLS REFERENCE      //////////////////
// FX SELECT BUTTONS (VOX ALTERNATIVES AFTER "/")
// -------------------------------------------------------------------------------------------------------------------------------- //
// LAYER A ROW 1 FX BUTTON | 0  Detune/Oct/Dbl | 1  Fltr/De-ess | 2  Comp        | 3  Fuzz/Gate   | 4  Boost/EQ   | 5  OD/Sat     | //
// -------------------------------------------------------------------------------------------------------------------------------- //
// LAYER A ROW 2 FX BUTTON | 6  Phaser/Flanger | 7  Chorus Pre  | 8  Dly Pre/Rack| 9  Chorus Post | 10 Delay Post | 11 Reverb     | //
// -------------------------------------------------------------------------------------------------------------------------------- //
// LAYER B ROW 1 FX BUTTON | 12 Whammy         | 13 Wah         | 14 Comp 2      | 15 Drive       | 16 Drive 2    | 17 Distortion | //
// -------------------------------------------------------------------------------------------------------------------------------- //
// LAYER B ROW 2 FX BUTTON | 18 Mod            | 19 Mod 2       | 20 Tremolo     | 21 Space       | 22 Delay 2    | 23 Reverb 2   | //
// -------------------------------------------------------------------------------------------------------------------------------- //

// AMP MODE KNOBS
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------- //
// LAYER A AMP KNOB TURN    | 0  Gain          | 1  Bass         | 2  Mid          | 3  Treble       | 4  Level       | 5  Master      | 6  Presence    | 7  Depth       | //
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------- //
// LAYER B AMP KNOB TURN    | 8  Input         | 9  Gate         | 10 Transpose    | 11 Doubler      | 12 Output      | 13 Low Cut     | 14 Hi Cut      | 15 Room        | //
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------- //
// LAYER A AMP KNOB PUSH    | 16 Gain Boost    | 17              | 18 Mid Boost    | 19 Bright       | 20             | 21             | 22             | 23 Depth OnOff | //
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------- //
// LAYER B AMP KNOB PUSH    | 24               | 25 Gate         | 26 Transpose    | 27 Doubler      | 28             | 29             | 30             | 31 Room OnOff  | //
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------- //

// EQ MODE KNOBS
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------- //
// LAYER A EQ KNOB TURN     | 0  Band 1        | 1  Band 2       | 2  Band 3       | 3  Band 4       | 4  Band 5      | 5  Band 6      | 6  Band 7      | 7  Band 8      | //
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------- //
// LAYER B EQ KNOB TURN     | 8  Band 9        | 9  Band 10      | 10 Band 11      | 11 Band 12      | 12 Band 13     | 13 Band 14     | 14 Band 15     | 15 Band 16     | //
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------- //

// FX/VOX MODE KNOBS
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------- //
// LAYER A FX KNOB TURN       | 0  Drive/Thrld   | 1  Tone         | 2  Mix         | 3  Depth/Range | 4  Decay/Fdbk  | 5  Time1/Attack| 6  Time2/Releas| 7  Rate        | //
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------- //
// LAYER B FX KNOB TURN       | 8  Input         | 9  Mod1         | 10 Mod2        | 11 Mod3        | 12 Level       | 13 Low cut     | 14 Hi cut      | 15 Size        | //
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------- //
// LAYER A FX KNOB PUSH       | 16 OnOff         | 17 Mode1        | 18 Mode2       | 19 Mode3       | 20 Stereo      | 21 Host Sync   | 22             | 23             | //
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------- //
// LAYER B FX KNOB PUSH       | 24               | 25 Mod1 OnOff   | 26 Mod2 OnOff  | 27 Mod3 OnOff  | 28             | 29             | 30             | 31             | //
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------- //

Var 
// STEP 1

    //////////////////////////////////////////////////
    //                 MODIFY BELOW                 //
    //              FOR ACTUAL WIDGETS              //
    //////////////////////////////////////////////////

// DECLARE YOUR WIDGETS FOR AMP, EQ AND EACH FX
// USE TAB TO GO TO EDITABLE PARTS
    // Amp widgets - knobs
    //e.g.    amp_gain, amp_master, amp_presence, amp_output, allOut, amp_gainbst, amp_bright,
    <amp0 widgets>
    <amp1 widgets>
    // Eq widgets
    //e.g.    eq_lo, eq_lomid, eq_himid, eq_hi,
    <eq0 widgets>
    <eq1 widgets>
    // NOW DECLARE WIDGETS FOR EACH EFFECT
    // FOR FX index NUMBER, USE THE "FX SELECT BUTTONS" TABLE ABOVE
    // UNCOMMENT AND MODIFY THE TEMPLATE BELOW FOR EACH EFFECT
    <FX_FX index 1_ widgets>
    //e.g.    od_drive, od_on,
    <FX_FX index 2_ widgets>
    //e.g.    chorus_mix, chorus_rate, chorus_sync, chorus_on,  
    <FX_FX index 3_ widgets>
    //e.g.    reverb_mod, reverb_mix, reverb_time, reverb_on 
    
// If an effect has ALTERNATIVE MODES (say, delay time can be free vs synced to MIDI and set note durations), here's a template for this
/*
    <FX_FX index n alternative widgets>
*/

    : Widget

// If you want to be able to sync widgets to plugin (e.g. to reflect changed presets), add this
/*
    <plugin sync widget>: Widget //button to sync widgets to plugin
    
    <plugin handle>: PluginBlock // this is the main plugin, add GPScript handle


On WidgetValueChanged (v: Double) From <plugin sync widget>
    If v > 0.6 Then
        RefreshWidgetsMappedToPlugin( <plugin handle> )
    End
End
*/

// STEP 2 

    //////////////////////////////////////////////////
    //                 MODIFY BELOW                 //
    //              FOR ACTUAL WIDGETS              //
    //////////////////////////////////////////////////

// CREATE ARRAYS FOR AMP, JUST LIST THE WIDGETS SEPARATED BY COMMAS, COPY AND PASTE FROM DECLARATIONS...
// USE TAB TO GO TO EDITABLE PARTS
// EXAMPLE:     Amp_controls: Widget Array = [amp_gain, amp_master, amp_presence, amp_output, allOut, amp_gainbst, amp_bright]
    Amp0_controls: Widget Array = [<Amp widgets>] // amp controls in this rack
    Amp1_controls: Widget Array = [<Amp widgets>] // amp controls in this rack
// CREATE ARRAY THAT MAPS THESE WIDGETS TO GLOBAL CONTROLS
// USE THE "AMP MODE KNOBS" TABLE ABOVE TO MAP WIDGETS TO GLOBAL CONTROLS
// EXAMPLE:     Amp_rt: Integer Array = [0, 1, 6, 4, 12, 16, 19]
    Amp0_rt: Integer Array = [<Amp control mappings>] //mapping to global rack controls, CHECK TABLE ABOVE FOR REFERENCE
    Amp1_rt: Integer Array = [<Amp control mappings>] //mapping to global rack controls, CHECK TABLE ABOVE FOR REFERENCE
    
    Amp_controls: Widget Array
    Amp_rt: Integer Array

// CREATE ARRAYS FOR EQ, JUST LIST THE WIDGETS SEPARATED BY COMMAS...
// USE THE "EQ MODE KNOBS" TABLE ABOVE TO MAP WIDGETS TO GLOBAL CONTROLS
// EXAMPLE:     EQ_controls: Widget Array = [eq_lo, eq_lomid, eq_himid, eq_hi]
    EQ0_controls: Widget Array = [<Eq widgets>] //eq controls in this rack
    EQ1_controls: Widget Array = [<Eq widgets>] //eq controls in this rack
// CREATE ARRAY THAT MAPS THESE WIDGETS TO GLOBAL CONTROLS
// USE THE "EQ MODE KNOBS" TABLE ABOVE TO MAP WIDGETS TO GLOBAL CONTROLS
// EXAMPLE:     EQ_rt: Integer Array = [0, 1, 2, 3]
    EQ0_rt: Integer Array = [<Eq control mappings>] //mapping to global rack controls, CHECK TABLE ABOVE FOR REFERENCE
    EQ1_rt: Integer Array = [<Eq control mappings>] //mapping to global rack controls, CHECK TABLE ABOVE FOR REFERENCE

// ...AND EACH EFFECT. THE NUMBER AFTER "FX" WILL BE REFERRED TO AS "FX index" LATER

// TEMPLATE - COPY THE COMMENTED OUT PART, REPEAT FOR EACH AVAILABLE EFFECT
// USE THE "FX/VOX MODE KNOBS" TABLE ABOVE TO MAP WIDGETS TO GLOBAL CONTROLS
// USE FX index NUMBERS FROM THE "FX SELECT BUTTONS" TABLE ABOVE, AS IN DECLARATIONS
// USE WIDGET LISTS FROM EACH EFFECT DECLARATION
// EXAMPLE:     FX5_controls: Widget Array = [od_drive, od_on]
/*
    FX<FX index n>_controls: Widget Array = [<FX index n widgets>] //individual effect 0 controls in this rack
    FX<FX index n>_rt: Integer Array = [<FX index n mappings>] //mapping to global rack controls, CHECK TABLE ABOVE FOR REFERENCE
*/

// for effects with ALTERNATIVE MODES, use this instead
/*
    FX_0_<FX index n>_controls: Widget Array = [<FX index n mode 0 widgets>]
    FX_1_<FX index n>_controls: Widget Array = [<FX index n mode 1 widgets>]
    FX<FX index n>_rt: Integer Array = [<FX index n mappings>]
    
    // keep the following 2 lines
    FX<FX index n>_controls: Widget Array
    FX<FX index n>_rt: Integer Array
*/

// NOW CREATE AN ARRAY WITH WIDGETS THAT TURN EACH EFFECT ON 
// DO NOT RENAME ARRAY!!!
// EXAMPLE:     FX_buttons: Widget Array = [od_on, chorus_on, reverb_on]
    FX_buttons: Widget Array = [<list onoff widgets here>] //list of FX ON/OFF buttons in this rack
// AND MAP THEM TO GLOBAL FX BUTTONS
// DO NOT RENAME ARRAY!!!
// EXAMPLE:     FX_rt: Integer Array = [5, 9, 11]
    FX_rt: Integer Array = [<and map them to FX buttons indexes>] //mapping to global FX buttons, CHECK TABLE ABOVE FOR REFERENCE    
    
    initmode: Integer = 0 // initial mode of this rack, 0 for amp, 1 for eq, 2 for fx
    
    amp_mode: Integer
    
    <amp selector wdgt>: Widget // your amp selector widget here
    

/*  if and effect has ALTERNATIVE MODES, add this variable to capture, repeat for other effects that have this 
    FX<FX index>_mode: Integer
*/

/* for effects with ALTERNATIVE MODES, need this function, repeat for each such effect
Function select_FX<FX index>_controls (dm: Integer)
    Select
        dm == 0 Do
            FX<FX index>_controls = FX<FX index>_0_controls
        dm == 1 Do
            FX<FX index>_controls = FX<FX index>_1_controls
    End
End
*/

// this will set amp controls according to the amp selector widget value
Function select_ampcontrols (am: Integer) 
    Select
        am == 0 Do
            Amp_controls = Amp0_controls
            Amp_rt = Amp0_rt
/* IF AMP SWITCHER ALSO CHANGES EQS, ADD THIS (FOR EACH AMP)
            EQ_controls = EQ<n>_controls
            EQ_rt = EQ<n>_rt
*/
/* REPEAT FOR ALL AMPS
        am == <n> Do
            Amp_controls = Amp<n>_controls
            Amp_rt = Amp<n>_rt
    End
*/
End
    
Initialization // set amp mode
    amp_mode = ScaleRange (GetWidgetValue (<amp selector wdgt>), <amp selection range>) // range will be 0,1 for 2 amps, 0,3 for 4 amps 
    select_ampcontrols (amp_mode)
/* for effects with ALTERNATIVE MODES, also need this
    FX<FX index>_mode = ScaleRange (GetWidgetValue (<widget that selects mode>), 0, 1) //assuming it's a simple on/off toggle
    select_FX<FX index>_controls (FX<FX index>_mode)
*/
End


// LEAVE THIS UNTOUCHED
Include "includes/gl/rs_vars_functions"

// MODIFY FOR ACTUAL AMP SELECTOR WIDGET
On WidgetValueChanged (v: Double) From <amp selector wdgt>
    If v > 0.6 Then
        amp_mode = 1 // set amp mode
        hideandshow ("show", <amp1 widgets>)
        hideandshow ("hide", <amp0 widgets>)
    Else
        amp_mode = 0 // set amp mode
        hideandshow ("hide", <amp1 widgets>)
        hideandshow ("show", <amp0 widgets>)
    End
    select_ampcontrols (amp_mode) // set amp controls
    If GetEnvVariable ("mode") == 0 Then // if in amp mode then
        osc_out_ws (Amp_controls, Amp_rt) // send out widget states to update global rack and controller
    End
End
   
    //////////////////////////////////////////////////
    //                AMP FUNCTIONS                 //
    //   <--- DELETE OR COMMENT OUT SECTION  --->   //
    //  <--- UP UNTIL EQ FUNCTIONS IF NO AMP  --->  //
    //////////////////////////////////////////////////

Include "includes/gl/rs_amp"

    //////////////////////////////////////////////////
    //                 MODIFY BELOW                 //
    //               FOR AMP WIDGETS                //
    //////////////////////////////////////////////////

// LIST AMP WIDGETS IN THE TEMPLATE AFTER "From", COPY WIDGET LIST FROM Amp_controls ARRAY
// USE TAB TO GO TO EDITABLE PART

On WidgetValueChanged (w: Widget, i: Integer, v: Double) From <Amp0 widgets> //amp controls
    //Print ("widgetchanging, mode is " + GetEnvVariable("mode") + ", fx selected " + GetEnvVariable("fxselected") + ", value " + v + ", index " + i + ",control " + Amp_rt[i])
    If StringToInt(GetEnvVariable ("mode")) == 0 And amp_mode == 0 Then //if amp mode is selected and amp is 0
        osc_out_ws1 ("/ws1", Amp_rt [i], v) //send widget value to global rackspace
    End
End

On WidgetValueChanged (w: Widget, i: Integer, v: Double) From <Amp1 widgets> //amp controls
    //Print ("widgetchanging, mode is " + GetEnvVariable("mode") + ", fx selected " + GetEnvVariable("fxselected") + ", value " + v + ", index " + i + ",control " + Amp_rt[i])
    If StringToInt(GetEnvVariable ("mode")) == 0 And amp_mode == 1 Then //if amp mode is selected and amp is 1
        osc_out_ws1 ("/ws1", Amp_rt [i], v) //send widget value to global rackspace
    End
End

/* REPEAT FOR ALL AMPS
On WidgetValueChanged (w: Widget, i: Integer, v: Double) From <Amp n widgets> //amp controls
    //Print ("widgetchanging, mode is " + GetEnvVariable("mode") + ", fx selected " + GetEnvVariable("fxselected") + ", value " + v + ", index " + i + ",control " + Amp_rt[i])
    If StringToInt(GetEnvVariable ("mode")) == 0 And amp_mode == <n> Then //if amp mode is selected
        osc_out_ws1 ("/ws1", Amp_rt [i], v) //send widget value to global rackspace
    End
End
*/


    //////////////////////////////////////////////////
    //            END AMP FUNCTIONS                 //
    //////////////////////////////////////////////////

    //////////////////////////////////////////////////
    //                 EQ FUNCTIONS                 //
    //  <--- DELETE OR COMMENT OUT SECTION  --->    //         
    //  <--- UP UNTIL FX FUNCTIONS IF NO EQ  --->   //
    //////////////////////////////////////////////////

Include "includes/gl/rs_eq"

    //////////////////////////////////////////////////
    //                 MODIFY BELOW                 //
    //                FOR EQ WIDGETS                //
    //////////////////////////////////////////////////

// LIST EQ WIDGETS IN THE TEMPLATE AFTER "From", COPY WIDGET LIST FROM EQ_controls ARRAY
// USE TAB TO GO TO EDITABLE PART

// EQ MODE CALLBACK TO UPDATE GLOBAL RACKSPACE WIDGETS
On WidgetValueChanged (w: Widget, i: Integer, v: Double) From <EQ0 widgets>
    //Print ("widgetchanging, mode is " + GetEnvVariable("mode") + ", fx selected " + GetEnvVariable("fxselected") + ", value " + v + ", index " + i + ",control " + EQ_rt[i])
    If StringToInt(GetEnvVariable ("mode")) == 1 And amp_mode == 0 Then //if eq mode is selected
        osc_out_ws1 ("/ws1", EQ_rt [i], v) //send widget value to global rackspace
    End
End

/* REPEAT FOR ALL EQS
On WidgetValueChanged (w: Widget, i: Integer, v: Double) From <EQ n widgets>
    //Print ("widgetchanging, mode is " + GetEnvVariable("mode") + ", fx selected " + GetEnvVariable("fxselected") + ", value " + v + ", index " + i + ",control " + EQ_rt[i])
    If StringToInt(GetEnvVariable ("mode")) == 1 And amp_mode == <n> Then //if eq mode is selected
        osc_out_ws1 ("/ws1", EQ_rt [i], v) //send widget value to global rackspace
    End
End
*/

    //////////////////////////////////////////////////
    //            END EQ FUNCTIONS                  //
    //////////////////////////////////////////////////
    

    //////////////////////////////////////////////////
    //                 FX FUNCTIONS                 //
    //                 DO NOT TOUCH                 //
    //////////////////////////////////////////////////

Include "includes/gl/rs_fx"

    //////////////////////////////////////////////////
    //            END FX FUNCTIONS                  //
    //////////////////////////////////////////////////

 

// STEP 3   
    
    //////////////////////////////////////////////////
    //                 MODIFY BELOW                 //
    //            FOR AVAILABLE EFFECTS             //
    //////////////////////////////////////////////////

// NOW START CUSTOMIZING FOR AVAILABLE EFFECTS
//RACKSPACE CALLBACK TO UPDATE WIDGET VALUES WHEN FX CONTROL VALUES CHANGE IN GLOBAL RACKSPACE

// UPDATE THIS TEMPLATE TO INCLUDE ALL AVAILABLE EFFECTS
// TEMPLATE: PRESS TAB TO MOVE THROUGH EDITABLE FIELDS, USE FX INDEXES YOU CREATED IN FX DECLARATIONS

On OSCMessageReceived (d: Integer, m: OSCMessage) Matching "/fx<FX index 1>", "/fx<FX index 2>", "/fx<FX index 3>" // d is the index of FX device to update
    Var //j: Integer
        i: Integer = OSC_GetArgAsInteger (m, 0) // this identifies widget to update
        v: Double = OSC_GetArgAsDouble (m, 1) // and the new value to set
    //Print ("device " + d)
    Select // get available widgets for relevant FX device
        d == 0 Do
            ctrls = FX<FX index 1>_controls
            rt = FX<FX index 1>_rt
        d == 1 Do
            ctrls = FX<FX index 2>_controls
            rt = FX<FX index 2>_rt
        d == 2 Do
            ctrls = FX<FX index 3>_controls
            rt = FX<FX index 3>_rt
/* repeat this for all effects
        d == <i> Do
            ctrls = FX<FX index x>_controls
            rt = FX<FX index x>_rt
*/
    End
    If IndexOf (rt, i) > -1 Then // if widget is available in this rack, update it
        SetWidgetValue (ctrls [IndexOf (rt, i)], v)
    End
End


// UPDATE THIS TEMPLATE TO INCLUDE ALL AVAILABLE EFFECTS, USE FX INDEXES YOU CREATED IN FX DECLARATIONS
// PRESS TAB TO MOVE THROUGH EDITABLE FIELDS

On OSCMessageReceived (d: Integer, m: OSCMessage) Matching "/fx<FX index 1>/q", "/fx<FX index 2>/q", "/fx<FX index 3>/q" // d is the index of FX device to update
    Var i: Integer // to iterate effect's widgets
        rm: OSCMessage //response message
        rs: String = ""// response string
    Select // get available widgets for relevant FX device
        d == 0 Do
            osc_out_ws (FX<FX index 1>_controls, FX<FX index 1>_rt)
        d == 1 Do
            osc_out_ws (FX<FX index 2>_controls, FX<FX index 2>_rt)
        d == 2 Do
            osc_out_ws (FX<FX index 3>_controls, FX<FX index 3>_rt)
/* repeat this for all effects if they exist
        d == <i> Do 
            osc_out_ws (FX<FX index x>_controls, FX<FX index x>_rt)
*/
    End
End


// USE FX indexes YOU CREATED IN FX DECLARATIONS
// USE WIDET LISTS FROM FX_controls ARRAYS
// USE TAB TO MOVE THROUGH EDITABLE FIELDS

    //////////////////////////////////////////////////
    //                 MODIFY BELOW                 //
    //            REPEAT FOR EACH EFFECT            //
    //////////////////////////////////////////////////

// USE THE FXx CALLBACK TEMPLATE FOR EACH EFFECT
// TEMPLATE - COPY THE COMMENTED OUT PART AND REPEAT FOR EACH EFFECT, COPY WIDGETS FROM FX<FX index>_controls ARRAYS
// PRESS TAB TO MOVE THROUGH EDITABLE FIELDS
/*
// FXx CALLBACK TEMPLATE

// FX<FX index> CALLBACK TO UPDATE GLOBAL RACKSPACE WIDGETS
On WidgetValueChanged (w: Widget, i: Integer, v: Double) From <insert widgets here> //fXx widgets
    If StringToInt(GetEnvVariable ("mode")) == 2 And StringToInt(GetEnvVariable ("fxselected")) == <FX index> Then //if fx mode is selected and fx<FX index> is selected
        osc_out_ws1 ("/ws1", FX<FX index>_rt[i], v) //send widget value to global rackspace
    Elsif StringToInt(GetEnvVariable ("mode")) < 2 And w == <onoff widget> Then //if amp/eq mode is selected and fx<FX index> on/off button is pressed
        osc_out_ws1 ("/ws1", maxrt + <FX index> + 1, v) //send on off button state to global rackspace
    End
End
*/

/* if an effect has ALTERNATIVE MODES, this is an alternative template

On WidgetValueChanged (w: Widget, i: Integer, v: Double) From <insert all effect widgets with mode 1 widgets here> //fXx widgets
    If w == <mode select widget for this effect> Then
        Select
            v > 0.6 Do
                hideandshow ("hide", <mode 0 alternative widgets>)
                hideandshow ("show", <mode 1 alternative widgets>)
                FX<FX index>_mode = 1
            True Do
                hideandshow ("show", <mode 0 alternative widgets>)
                hideandshow ("hide", <mode 1 alternative widgets>)
                FX<FX index>_mode = 0
        End
        select_FX<FX index>_controls (FX<FX index>_mode)
        If StringToInt(GetEnvVariable ("mode")) == 2 And StringToInt(GetEnvVariable ("fxselected")) == <FX index> Then
            osc_out_ws (FX<FX index>_controls, FX<FX index>_rt)
        End
    End
    If StringToInt(GetEnvVariable ("mode")) == 2 And StringToInt(GetEnvVariable ("fxselected")) == <FX index> And FX<FX index>_mode == 0 Then //if fx mode is selected and fx10 is selected
        osc_out_ws1 ("/ws1", FX<FX index>_rt[i], v) //send widget value to global rackspace
    Elsif StringToInt(GetEnvVariable ("mode")) == 2 And StringToInt(GetEnvVariable ("fxselected")) == <FX index> And FX<FX index>_mode == 1 And i < <1st alt widget index in "From"> And i > <last alt widget index in "From" > Then
        osc_out_ws1 ("/ws1", FX<FX index>_rt[i], v) //send widget value to global rackspace
    Elsif StringToInt(GetEnvVariable ("mode")) < 2 And w == dlyp_on Then //if amp/eq mode is selected and fx10 on/off button is pressed
        osc_out_ws1 ("/ws1", maxrt + <FX index> + 1, v) //send on off button state to global rackspace
    End
End

//now add processing for the alternative widgets
On WidgetValueChanged (w: Widget, i: Integer, v: Double) From <insert alternative mode 0 widgets>
    If StringToInt(GetEnvVariable ("mode")) == 2 And StringToInt(GetEnvVariable ("fxselected")) == <FX index> And FX<FX index>_mode == 1 Then
        osc_out_ws1 ("/ws1", FX<FX index>_rt[i + 2], v) 
    End
End
*/

    //////////////////////////////////////////////////
    //               DO NOT REMOVE THESE            //
    //        CAN ADD YOUR ACTIONS IF NEEDED        //
    //////////////////////////////////////////////////


On Deactivate
    //Print ("on deactivate triggered, reset ping_time") 
    ping_time = 0.0
    //osc_enabled = false
End

On Activate
    //Print ("on activate triggered, set timers running")
    SetTimersRunning (true)
    If osc_enabled == false Then
        OSC_SendIntegerSpecific ("/ping", initmode, oscip, oscport)
    End
End

// Called when you switch variations
On Variation(oldVariation : integer, newVariation : integer)
    //Print ("on variation triggered, sending ping")
    //OSC_SendIntegerSpecific ("/ping", initmode, oscip, oscport)
    ping_global ()
End