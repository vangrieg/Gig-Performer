Include "$system$"
Include "$rig$"
Include "includes/osc"

Var xtmode: Integer = 0
    
    spchanged: Boolean = False
    songchanged: Boolean = True


Function set_xtouch_mode (i: Integer) // set layer A
    If MidiOutDeviceExists (XTOUT) == true Then
        SendNowToMidiOutDevice (XTOUT, MakeProgramChangeMessageEx (0, 1))
    End
    OSC_SendIntegerSpecific ("/xtmode", xtmode, oscip, oscport)
End

Function reset_l2_leds () // in layer B, mode LEDs are handled here, so set them based on playhead, metronome etc. states
    If MidiOutDeviceExists (XTOUT) == True Then
        If IsPlayheadEnabled () == True Then
            SendNowToMidiOutDevice (XTOUT, MakeNoteMessageEx (8, 1, 1))
        Else
            SendNowToMidiOutDevice (XTOUT, MakeNoteMessageEx (8, 0, 1))
        End
        If IsMetronomeEnabled () == True Then
            SendNowToMidiOutDevice (XTOUT, MakeNoteMessageEx (9, 1, 1))
        Else
            SendNowToMidiOutDevice (XTOUT, MakeNoteMessageEx (9, 0, 1))
        End
        If InTunerView () == True Then
            SendNowToMidiOutDevice (XTOUT, MakeNoteMessageEx (1, 1, 1))
        Else
            SendNowToMidiOutDevice (XTOUT, MakeNoteMessageEx (1, 0, 1))
        End
    End
End

Function reset_xtouch () // turn all leds off 
    Var i: Integer
    If MidiOutDeviceExists (XTOUT) == True Then
        For i = 1; i < 9; i = i + 1 Do // set all knob modes to single
            SendNowToMidiOutDevice (XTOUT, MakeControlChangeMessageEx (i, 0, 1))
        End
        For i = 9; i < 17; i = i + 1 Do // set all knob leds off
            SendNowToMidiOutDevice (XTOUT, MakeControlChangeMessageEx (i, 0, 1))
        End
        For i = 0; i < 16; i = i + 1 Do // turn off all buttons
            SendNowToMidiOutDevice (XTOUT, MakeNoteMessageEx (i, 0, 1))
        End
    End
End

Initialization
    reset_xtouch () // when loading, turn everything off
End

On MidiEvent (m: MidiMessage) From XTOUCH  // main logic is here
//Var hold: Boolean = false
    Select
        IsController (m) == True And xtmode == 0 And (GetCCNumber (ReinterpretAsControllerMessage(m)) >= 24 And GetCCNumber (ReinterpretAsControllerMessage(m)) <= 26) Do //mode btn pressed, layer A, input B, change layer
            If GetCCValue (ReinterpretAsControllerMessage(m)) == 127 Then
                reset_xtouch () // turn off all leds
            Else
                //Print ("mode btn pressed, layer A, input B, xtmode " + xtmode + ", cc " + GetCCNumber (ReinterpretAsControllerMessage(m)) + ", value " + GetCCValue (ReinterpretAsControllerMessage(m)))
                xtmode = 1 // change layer
                OSC_SendIntegerSpecific ("/xtmode", xtmode, oscip, oscport) //and inform rack
                reset_l2_leds () //update mode leds for layer b
            End
        IsController (m) == True And xtmode == 1 And (GetCCNumber (ReinterpretAsControllerMessage(m)) >= 20 And GetCCNumber (ReinterpretAsControllerMessage(m)) <= 23) Do //mode btn pressed, layer B, input A, change layer
            If GetCCValue (ReinterpretAsControllerMessage(m)) == 127 Then
                reset_xtouch ()
            Else
                //Print ("mode btn pressed, layer B, input A, xtmode " + xtmode + ", cc " + GetCCNumber (ReinterpretAsControllerMessage(m)) + ", value " + GetCCValue (ReinterpretAsControllerMessage(m)))
                xtmode = 0
                OSC_SendIntegerSpecific ("/xtmode", xtmode, oscip, oscport)
            End
        IsController (m) == True and xtmode == 1 And GetCCNumber (ReinterpretAsControllerMessage(m)) == 24 Do //first mode btn is for tap tempo
            If GetCCValue (ReinterpretAsControllerMessage(m)) == 127 Then
                Tap ()
            End
        IsController (m) == True And xtmode == 1 And GetCCNumber (ReinterpretAsControllerMessage(m)) == 25 Do //second one is to toggle tuner
            If GetCCValue (ReinterpretAsControllerMessage(m)) == 0 Then
                ToggleTunerVisible ()
                Sleep (100) //timeout to make sure tuner is on
                If InTunerView () == True Then
                    SendNowToMidiOutDevice (XTOUT, MakeNoteMessageEx (1, 1, 1))
                Else
                    SendNowToMidiOutDevice (XTOUT, MakeNoteMessageEx (1, 0, 1))
                End
            End
        IsController (m) == True And xtmode == 1 And GetCCNumber (ReinterpretAsControllerMessage(m)) == 26 Do //third button is for global play state
            If GetCCValue (ReinterpretAsControllerMessage(m)) == 0 Then
                Select
                    IsPlayheadEnabled () == False Do
                        EnablePlayhead (True)
                        Sleep (100)
                        SendNowToMidiOutDevice (XTOUT, MakeNoteMessageEx (8, 1, 1))
                    IsPlayheadEnabled () == True Do
                        EnablePlayhead (False)
                        Sleep (100)
                        SendNowToMidiOutDevice (XTOUT, MakeNoteMessageEx (8, 0, 1))
                End
            End
        IsController (m) == True And xtmode == 1 And GetCCNumber (ReinterpretAsControllerMessage(m)) == 27 Do //fourth button is for metronome toggle
            If GetCCValue (ReinterpretAsControllerMessage(m)) == 0 Then
                Sleep (100)
                Select
                    IsMetronomeEnabled () == False Do
                        EnableMetronome (True)
                        Sleep (100)
                        SendNowToMidiOutDevice (XTOUT, MakeNoteMessageEx (9, 1, 1))
                    IsMetronomeEnabled () == True Do
                        EnableMetronome (False)
                        Sleep (100)
                        SendNowToMidiOutDevice (XTOUT, MakeNoteMessageEx (9, 0, 1))
                End
            End
        IsNote (m) == True And xtmode == 0 And BetweenNotes (20, ReinterpretAsNoteOnMessage(m), 31) Do // fx button pressed, layer A, input from B, change layer
            If GetVelocity (ReinterpretAsNoteOnMessage(m)) == 127 Then
                reset_xtouch ()
            Else
                //Print ("fx btn pressed, layer A, input B, xtmode " + xtmode + ", note " + GetNoteNumber (ReinterpretAsNoteOnMessage(m)) + ", velocity " + GetVelocity (ReinterpretAsNoteOnMessage(m)))
                xtmode = 1
                OSC_SendIntegerSpecific ("/xtmode", xtmode, oscip, oscport)
                reset_l2_leds () // in layer A these LEDs are controlled by this script, so need to handle that
            End
        IsNote (m) == True And xtmode == 1 And BetweenNotes (8, ReinterpretAsNoteOnMessage(m), 19) Do // fx button pressed, layer B, input from A, change layer
            If GetVelocity (ReinterpretAsNoteOnMessage(m)) == 127 Then
                reset_xtouch ()
            Else
                //Print ("fx btn pressed, layer A, input B, xtmode " + xtmode + ", note " + GetNoteNumber (ReinterpretAsNoteOnMessage(m)) + ", velocity " + GetVelocity (ReinterpretAsNoteOnMessage(m)))
                xtmode = 0
                OSC_SendIntegerSpecific ("/xtmode", xtmode, oscip, oscport)
            End
        True Do //by default, pass through
            //Print ("xtmode " + xtmode)
            InjectMidiEvent (XTOUT, m) 
    End
    
    //InjectMidiEvent (XTOUT, m) 
End

Function set_sp_leds (index: Integer)
    Var leds: Integer Array = [20, 21, 22, 23]
        i: Integer
    If MidiOutDeviceExists (FSOUT) Then
        For i = 0; i < Size (leds); i = i + 1 Do
            If i == index Then
                SendNowToMidiOutDevice (FSOUT, MakeControlChangeMessageEx (leds [i], 127, 1))
            Else
                SendNowToMidiOutDevice (FSOUT, MakeControlChangeMessageEx (leds [i], 0, 1))
            End
        End
    End
End

On ControlChangeEvent (c: ControlChangeMessage) Matching 20, 21, 22, 23 From SWITCH
    If InSetlistMode () == True Then
        Select
            GetCCNumber (c) == 20 And GetCurrentSongPartIndex () == 0 Do
                If GetCCValue (c) == 127 Then 
                    Tap ()
                    OSC_SendCommandSpecific ("/tapon", oscip, oscport)
                Elsif spchanged == True Then
                    spchanged = False
                Else
                    OSC_SendCommandSpecific ("/tapoff", oscip, oscport)
                End
            GetCCNumber (c) == 21 And GetCurrentSongPartIndex () == 1 Do
                If GetCCValue (c) == 127 Then 
                    Tap ()
                    OSC_SendCommandSpecific ("/tapon", oscip, oscport)
                Elsif spchanged == True Then
                    spchanged = False
                Else
                    OSC_SendCommandSpecific ("/tapoff", oscip, oscport)
                End
            GetCCNumber (c) == 22 And GetCurrentSongPartIndex () == 2 Do
                If GetCCValue (c) == 127 Then 
                    Tap ()
                    OSC_SendCommandSpecific ("/tapon", oscip, oscport)
                Elsif spchanged == True Then
                    spchanged = False
                Else
                    OSC_SendCommandSpecific ("/tapoff", oscip, oscport)
                End
            GetCCNumber (c) == 23 And GetCurrentSongPartIndex () == 3 Do
                If GetCCValue (c) == 127 Then 
                    Tap ()
                    OSC_SendCommandSpecific ("/tapon", oscip, oscport)
                Elsif spchanged == True Then
                    spchanged = False
                Else
                    OSC_SendCommandSpecific ("/tapoff", oscip, oscport)
                End
            True Do
                InjectMidiEventViaRigManager (SWITCH, c)
        End
    End
End

// Called when you switch to another songpart
On Songpart(oldSongpartIndex : integer, newSongpartIndex : integer)
    If InSetlistMode () == True Then
        set_sp_leds (newSongpartIndex)
    End
    If songchanged == True Then
        songchanged = False
    Else
        spchanged = True
    End
End

On Song (old: Integer, new: Integer)
    songchanged = True
End

On SystemEvent Matching GigLoaded
    reset_xtouch ()
    set_xtouch_mode (xtmode)
    set_sp_leds (GetCurrentSongPartIndex())
End